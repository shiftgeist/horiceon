#!/usr/bin/env zsh

# general

alias battery-status="upower -i /org/freedesktop/UPower/devices/battery_BAT0 | grep -E 'state|time\ to\ full|percentage'"
alias docker-cleanup="echo 'Cleaning docker images older than 24h' && docker image prune -a --filter 'until=24h'"
alias find-broken-symlinks="find ~/ -xtype l -print"
alias fonts="fc-list"
alias fonts-rebuild="fc-cache -f -v"
alias x-refresh-db="xrdb ~/.Xresources"
alias select-file="xsel -b <"
alias untar="tar xvf"
alias untargz="tar zxvf"
alias untarxz="tar xf"
alias untarbz2="tar xjf"
alias ungz="gzip -d"

alias zsh-debug="zprof > zprof-out.txt && less zprof-out.txt && rm zprof-out.txt"

# system

alias syslog-crit="sudo dmesg -w -l err,warn"
alias syslog="sudo dmesg -w"
alias ports="netstat -tulpn"
alias mountcol="mount | column -t"
alias getownip="curl ifconfig.me"
alias curl-json="curl --header 'Content-Type:application/json'"
alias vm="mv"
alias update-go="rice i golang"
alias calc="bc -l"

# command line

alias cat="bat"
alias history="history 0"
alias vimz="fc"
alias json="fx"

# processes

alias killp="pkill"

# git

git_is_repo() {
  git rev-parse HEAD > /dev/null 2>&1
}

# We wrap in a local function instead of exporting the variable directly in
# order to avoid interfering with manually-run git commands by the user.
__git() {
  GIT_OPTIONAL_LOCKS=0 command git "$@"
}

# Outputs the name of the current branch
__git_current_branch() {
  git_is_repo || return
  ref=$(__git symbolic-ref --quiet HEAD 2> /dev/null)
  ret=$?
  if [ $ret -ne 0 ]; then
    [ $ret -eq 128 ] && return  # no git repo.
    ref=$(__git rev-parse --short HEAD 2> /dev/null) || return
  fi
  echo "${ref#refs/heads/}"
}

# Outputs the id of the current commit
__git_current_commit() {
  ref=$(git rev-list --tags --max-count=1)
  echo "$ref"
}

__git_fzf_branch() {
  git_is_repo || return

  git branch --all --sort=-committerdate --color=always |
    # remove entries with "HEAD" in them
    grep -v HEAD |
    # run thought fzf
    fzf --ansi --no-multi --preview-window right:65% --preview 'git log -n 50 --color=always --date=short --pretty="format:%C(auto)%cd %h%d %s (%an)" $(sed "s/.* //" <<< {})' |
    # trim asterisk and leading whitespace
    sed "s/.* //"
}

__git_fzf_checkout() {
  git_is_repo || return

  if [[ $@ ]]; then
    command git checkout "$@"
    return $?
  fi

  local branch
  branch=$(__git_fzf_branch)
  [[ "$branch" = "" ]] && return

  if [[ "$branch" = "remotes/"* ]]; then
    git checkout "$(echo $branch | cut -d '/' -f 3-4)";
  else
    git checkout "$branch";
  fi
}

__git_push_current_to_origin() {
  git push --set-upstream origin "$(__git_current_branch)"
}

__git_latest_tag() {
  git describe --tags "$(__git_current_commit)"
}

__git_push_force_ask() {
  read "REPLY?Force push? (Yy) "
  case $REPLY in
    *)
    git push --force-with-lease
    ;;
  esac
}

__git_flow_release_start() {
  if [[ $@ ]]; then
    command git flow release start "$@"
  else
    read "REPLY?Major (default) or Minor (minor)? "
    case $REPLY in
      minor)
      git flow release start $(up git minor)
      ;;
      *)
      git flow release start $(up git major)
      ;;
    esac
  fi

}

__git_flow_hotfix_start() {
  if [[ $@ ]]; then
    command git flow hotfix start "$@"
  else
    git flow hotfix start $(up git patch)
  fi
}

__git_flow_finish_ask() {
  local BRANCH=$(__git_current_branch)
  local FLOW_TYPE="$(cut -d '/' -f1 <<< "$BRANCH")"
  local FLOW_NAME="$(cut -d '/' -f2 <<< "$BRANCH")"
  local FLOW_MESSAGE=""

  [[ $FLOW_TYPE == "release" ]] && FLOW_MESSAGE="-m \"$FLOW_NAME\""
  [[ $FLOW_TYPE == "hotfix" ]] && FLOW_MESSAGE="-m \"$FLOW_NAME\""

  echo "Command to be executed: \"git flow $FLOW_TYPE finish $FLOW_MESSAGE\""
  echo ""
  read "REPLY?Continue? (Yy) "
  case $REPLY in
    *)
    git flow $FLOW_TYPE finish $FLOW_MESSAGE
    ;;
  esac
  echo
}

alias gco="__git_fzf_checkout"
alias gcom="git checkout master"
alias gcod="git checkout develop"

alias gaa="git add ."
alias gcm="git commit -m"
alias gcam="git add . && git commit -m"

alias gp="git push"
alias gpf="__git_push_force_ask"
alias gpsup="__git_push_current_to_origin"
alias gptdm="git push --tags && git checkout develop && git push && git checkout master && git push"

alias gl="git pull"
alias gf="git fetch --all"
alias gfp="git fetch --all --prune"

alias glog="git log --oneline --decorate --graph"
alias gloga="git log --oneline --decorate --graph --all"
alias glol="git log --graph --pretty='%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset'"
alias gst="git status"
alias gd="git diff"
alias gt="git tag | sort -h"
alias gdesc="__git_latest_tag"

alias gb="git branch"
alias gbc="git branch --merged | egrep -v '(^\*|master|dev)' | xargs git branch -d && git pull --prune"

alias grv="git remote -v"

alias gsta="git stash -u"
alias gstp="git stash pop"

# git flow

alias gffs="git flow feature start"
alias gfhs="__git_flow_hotfix_start"
alias gfrs="__git_flow_release_start"

alias gff="__git_flow_finish_ask"

# list

alias ls="exa"
alias la="ls -lah"

# npm

alias npmi="npm install"
alias npmig="npm install -g"
alias npmid="npm install -D"
alias npmlg="volta list all"
alias npmr="npm run"
alias npmrs="npm run start"
alias npmin="npm init -y"

alias nv="npm version --no-git-tag-version"

# nvm

alias nvmin="nvm install node --reinstall-packages-from=node"

# tmux

alias ta="tmux attach -t"
alias tad="tmux attach -d -t"
alias ts="tmux new-session -s"
alias tl="tmux list-sessions"
alias tksv="tmux kill-server"
alias tkss="tmux kill-session -t"

# music

alias lofi="mpv --ytdl-format=93 \"https://www.youtube.com/watch?v=5qap5aO4i9A\" --no-video --really-quiet"
alias lofiv="vlc --open \"https://www.youtube.com/watch?v=5qap5aO4i9A\" &"
