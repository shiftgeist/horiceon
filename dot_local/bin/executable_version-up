#!/usr/bin/env bash
# Copyright (C) 2017, Oleksandr Kucherenko (from https://gist.github.com/OleksandrKucherenko/9fb14f81a29b46886ccd63b774c5959f)
# Copyright (C) 2021, Felix Hungenberg (shiftgeist)

function help() {
  echo 'Usage: version-up [command] [suffix] [option]'
  echo ''
  echo 'Commands:'
  echo '    major, minor, patch, rev'
  echo ''
  echo 'Suffix:'
  echo '    alpha, beta, rc'
  echo ''
  echo 'Options:'
  echo '    help, npm'
  exit 0
}

# options
NPM=false

function latest_tag() {
  if [ "$NPM" = false ] && latest_git_tag ; then
    latest_git_tag
  else
    latest_npm_tag
  fi
}

function latest_git_tag() {
  git describe --tags --abbrev=0 2>/dev/null
}

function latest_npm_tag() {
  sed -nE 's/^\s*"version": "(.*?)",$/\1/p' package.json
}

function version_dots() {
  echo "$TAG" | sed 's/-.*//' | grep -o "\." | wc -l
}

function increment_patch() {
  PARTS[2]=$(( PARTS[2] + 1 ))
  PARTS[3]="-1"
}

function increment_minor() {
  PARTS[1]=$(( PARTS[1] + 1 ))
  PARTS[2]=0
  PARTS[3]="-1"
}

function incremet_major() {
  if [[ "${PARTS[0]}" == *"v"* ]]; then
    PARTS[0]=v$(( PARTS[0] + 1 ))
  else
    PARTS[0]=$(( PARTS[0] + 1 ))
  fi
  PARTS[1]=0
  PARTS[2]=0
  PARTS[3]="-1"
}

function incremet_revision() {
  PARTS[4]=$(( PARTS[4] + 1 ))
}

function compose() {
  MAJOR="${PARTS[0]}"
  MINOR=".${PARTS[1]}"
  PATCH=".${PARTS[2]}"
  SUFFIX="-${PARTS[3]}"
  REVISION=".${PARTS[4]}"

  [[ "${#PATCH}" == 1 ]] && PATCH=""
  [[ "${#REVISION}" == 1 ]] && REVISION=""
  if [[ "${PARTS[3]}" == "-1" ]] || [[ "${#SUFFIX}" == 1 ]]; then
    SUFFIX=""
    REVISION=""
  fi

  if [ "$DOTS" == "2" ]; then
    echo "${MAJOR}${MINOR}${PATCH}${SUFFIX}${REVISION}" # full format
  else
    echo "${MAJOR}${MINOR}${SUFFIX}${REVISION}" # half format
  fi
}

# do GIT data extracting
TAG=$(latest_tag)
DOTS=$(version_dots)

# {MAJOR}.{MINOR}[.{PATCH}][-{SUFFIX}][.{REVISION}]
#
#  Suffix: alpha, beta, rc
#    No Suffix --> {NEW_VERSION}-alpha
#    alpha --> beta
#    beta --> rc
#    rc --> {VERSION}
#
VERSION=( ${TAG//-/ } )
PARTS=( ${VERSION[0]//./ } ) # don't include suffix in first part

if [ "${VERSION[0]}" != "${VERSION[1]}" ]; then
  PRERELEASE=( ${VERSION[1]//./ } )
  PARTS[3]="${PRERELEASE[0]}"
  PARTS[4]="${PRERELEASE[1]}"
else
  PARTS[4]="0" # suffix revision base
fi

# parse input parameters
for i in "$@"
do
  key="$i"

  case $key in
    alpha)
    PARTS[3]="alpha"
    ;;
    beta)
    PARTS[3]="beta"
    ;;
    rc)
    PARTS[3]="rc"
    ;;
    patch)
    increment_patch
    ;;
    minor)
    increment_minor
    ;;
    major)
    incremet_major
    ;;
    rev)
    incremet_revision
    ;;
    npm)
    NPM=true
    ;;
    *) # unknown command
    help
    exit 0
    ;;
  esac
  shift
done

# output
compose
